type token =
  | TRUE
  | FALSE
  | NIL
  | INT of (Int64.t)
  | SINT of (int * Int64.t)
  | UINT of (int * Int64.t)
  | FLOAT of (int * float)
  | IDENT of (string)
  | B_IDENT of (string)
  | STRING of (string)
  | CHAR of (string)
  | TYVAR of (string)
  | AS
  | CATCH
  | CCODE
  | ELSE
  | EXCEPTION
  | B_FOLD
  | FOLD
  | B_FOR
  | FOR
  | FROM
  | FUN
  | IF
  | B_IMPORT
  | IMPORT
  | IN
  | OPERATOR
  | B_REF
  | REF
  | THROW
  | TRY
  | TYPE
  | VAL
  | VAR
  | WHILE
  | B_LPAREN
  | LPAREN
  | RPAREN
  | B_LSQUARE
  | LSQUARE
  | RSQUARE
  | B_LBRACE
  | LBRACE
  | RBRACE
  | COMMA
  | DOT
  | SEMICOLON
  | COLON
  | BAR
  | CONS
  | CAST
  | DOUBLE_ARROW
  | ARROW
  | EOF
  | B_MINUS
  | MINUS
  | B_PLUS
  | PLUS
  | B_STAR
  | STAR
  | SLASH
  | MOD
  | B_POWER
  | POWER
  | SHIFT_RIGHT
  | SHIFT_LEFT
  | BITWISE_AND
  | BITWISE_XOR
  | BITWISE_NOT
  | LOGICAL_AND
  | LOGICAL_OR
  | LOGICAL_NOT
  | EQUAL
  | PLUS_EQUAL
  | MINUS_EQUAL
  | STAR_EQUAL
  | SLASH_EQUAL
  | MOD_EQUAL
  | AND_EQUAL
  | OR_EQUAL
  | XOR_EQUAL
  | SHIFT_LEFT_EQUAL
  | SHIFT_RIGHT_EQUAL
  | EQUAL_TO
  | NOT_EQUAL
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* ficus parser *)
open Syntax

let imported_module_list = ref []
let current_file_id = ref noid
let update_imported_list i = imported_module_list := i :: !imported_module_list

let make_loc(pos0, pos1) =
    let { Lexing.pos_lnum=l0; Lexing.pos_bol=b0; Lexing.pos_cnum=c0 } = pos0 in
    let { Lexing.pos_lnum=l1; Lexing.pos_bol=b1; Lexing.pos_cnum=c1 } = pos1 in
    if c0 <= c1 then
        { loc_fname = !current_file_id; loc_line0 = l0;
          loc_pos0 = c0 - b0+1; loc_line1 = l1; loc_pos1 = c1 - b1+1 }
    else
        { loc_fname = !current_file_id; loc_line0 = l1;
          loc_pos0 = c1 - b1+1; loc_line1 = l0; loc_pos1 = c0 - b0+1 }

let curr_loc() = make_loc(Parsing.symbol_start_pos(), Parsing.symbol_end_pos())
let curr_loc_n n = make_loc((Parsing.rhs_start_pos n), (Parsing.rhs_end_pos n))

let make_new_tp () = TypVar (ref (None: type_t option))
let make_new_ctx () = (make_new_tp(), curr_loc())

let make_bin_op(op, a, b) = ExpBinOp(op, a, b, make_new_ctx())
let make_un_op(op, a) = ExpUnOp(op, a, make_new_ctx())

let expseq2exp es n = match es with
      [] -> ExpNop(TypVoid, curr_loc_n(n))
    | e::[] -> e
    | _ -> ExpSeq(es, (make_new_tp(), (curr_loc_n n)))

let make_deffun fname args rt body flags loc tmp =
    let i = if tmp then (get_unique_id fname tmp) else (get_id fname) in
    { df_name=i; df_template_args=[]; df_args=args; df_rt=rt;
      df_body=body; df_flags=flags; df_loc=loc; df_template_inst=[] }

# 133 "parser.ml"
let yytransl_const = [|
  257 (* TRUE *);
  258 (* FALSE *);
  259 (* NIL *);
  269 (* AS *);
  270 (* CATCH *);
  271 (* CCODE *);
  272 (* ELSE *);
  273 (* EXCEPTION *);
  274 (* B_FOLD *);
  275 (* FOLD *);
  276 (* B_FOR *);
  277 (* FOR *);
  278 (* FROM *);
  279 (* FUN *);
  280 (* IF *);
  281 (* B_IMPORT *);
  282 (* IMPORT *);
  283 (* IN *);
  284 (* OPERATOR *);
  285 (* B_REF *);
  286 (* REF *);
  287 (* THROW *);
  288 (* TRY *);
  289 (* TYPE *);
  290 (* VAL *);
  291 (* VAR *);
  292 (* WHILE *);
  293 (* B_LPAREN *);
  294 (* LPAREN *);
  295 (* RPAREN *);
  296 (* B_LSQUARE *);
  297 (* LSQUARE *);
  298 (* RSQUARE *);
  299 (* B_LBRACE *);
  300 (* LBRACE *);
  301 (* RBRACE *);
  302 (* COMMA *);
  303 (* DOT *);
  304 (* SEMICOLON *);
  305 (* COLON *);
  306 (* BAR *);
  307 (* CONS *);
  308 (* CAST *);
  309 (* DOUBLE_ARROW *);
  310 (* ARROW *);
    0 (* EOF *);
  311 (* B_MINUS *);
  312 (* MINUS *);
  313 (* B_PLUS *);
  314 (* PLUS *);
  315 (* B_STAR *);
  316 (* STAR *);
  317 (* SLASH *);
  318 (* MOD *);
  319 (* B_POWER *);
  320 (* POWER *);
  321 (* SHIFT_RIGHT *);
  322 (* SHIFT_LEFT *);
  323 (* BITWISE_AND *);
  324 (* BITWISE_XOR *);
  325 (* BITWISE_NOT *);
  326 (* LOGICAL_AND *);
  327 (* LOGICAL_OR *);
  328 (* LOGICAL_NOT *);
  329 (* EQUAL *);
  330 (* PLUS_EQUAL *);
  331 (* MINUS_EQUAL *);
  332 (* STAR_EQUAL *);
  333 (* SLASH_EQUAL *);
  334 (* MOD_EQUAL *);
  335 (* AND_EQUAL *);
  336 (* OR_EQUAL *);
  337 (* XOR_EQUAL *);
  338 (* SHIFT_LEFT_EQUAL *);
  339 (* SHIFT_RIGHT_EQUAL *);
  340 (* EQUAL_TO *);
  341 (* NOT_EQUAL *);
  342 (* LESS_EQUAL *);
  343 (* GREATER_EQUAL *);
  344 (* LESS *);
  345 (* GREATER *);
    0|]

let yytransl_block = [|
  260 (* INT *);
  261 (* SINT *);
  262 (* UINT *);
  263 (* FLOAT *);
  264 (* IDENT *);
  265 (* B_IDENT *);
  266 (* STRING *);
  267 (* CHAR *);
  268 (* TYVAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\008\000\008\000\009\000\009\000\009\000\010\000\
\010\000\010\000\010\000\010\000\010\000\004\000\004\000\004\000\
\004\000\012\000\012\000\012\000\012\000\012\000\012\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\025\000\025\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\024\000\024\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\005\000\005\000\005\000\
\005\000\007\000\007\000\032\000\032\000\026\000\026\000\033\000\
\033\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\029\000\034\000\034\000\
\036\000\037\000\037\000\030\000\030\000\042\000\042\000\040\000\
\039\000\039\000\039\000\043\000\043\000\043\000\044\000\044\000\
\027\000\027\000\031\000\031\000\045\000\045\000\038\000\038\000\
\038\000\038\000\038\000\047\000\047\000\046\000\046\000\014\000\
\014\000\015\000\015\000\048\000\016\000\016\000\017\000\049\000\
\049\000\019\000\019\000\050\000\050\000\013\000\013\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\053\000\053\000\
\055\000\055\000\006\000\006\000\054\000\054\000\041\000\041\000\
\035\000\035\000\028\000\028\000\018\000\018\000\051\000\051\000\
\000\000"

let yylen = "\002\000\
\001\000\002\000\000\000\002\000\003\000\001\000\001\000\002\000\
\004\000\004\000\001\000\002\000\002\000\003\000\001\000\002\000\
\002\000\003\000\003\000\001\000\001\000\001\000\001\000\002\000\
\004\000\002\000\004\000\005\000\003\000\003\000\003\000\001\000\
\003\000\001\000\003\000\003\000\003\000\005\000\005\000\005\000\
\004\000\004\000\001\000\003\000\001\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\007\000\005\000\005\000\003\000\003\000\007\000\002\000\004\000\
\005\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\003\000\005\000\001\000\
\003\000\003\000\001\000\001\000\002\000\001\000\000\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\001\000\
\003\000\005\000\003\000\001\000\003\000\003\000\001\000\007\000\
\001\000\003\000\005\000\001\000\003\000\005\000\001\000\000\000\
\003\000\001\000\005\000\003\000\003\000\001\000\001\000\003\000\
\004\000\002\000\003\000\001\000\000\000\003\000\001\000\001\000\
\001\000\003\000\001\000\003\000\002\000\002\000\004\000\002\000\
\000\000\005\000\002\000\003\000\001\000\001\000\003\000\001\000\
\001\000\003\000\004\000\002\000\004\000\002\000\003\000\001\000\
\002\000\000\000\001\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\082\000\091\000\092\000\085\000\086\000\087\000\
\088\000\032\000\089\000\090\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\168\000\169\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\209\000\000\000\006\000\007\000\
\000\000\023\000\000\000\000\000\000\000\000\000\034\000\079\000\
\000\000\203\000\204\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\000\000\000\000\000\173\000\000\000\000\000\000\000\
\000\000\000\000\115\000\107\000\106\000\108\000\109\000\110\000\
\111\000\113\000\112\000\114\000\116\000\117\000\118\000\119\000\
\121\000\123\000\120\000\122\000\174\000\000\000\068\000\000\000\
\000\000\206\000\000\000\000\000\000\000\208\000\207\000\000\000\
\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\046\000\069\000\066\000\067\000\072\000\
\071\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\124\000\125\000\126\000\127\000\128\000\129\000\130\000\
\131\000\132\000\133\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\171\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\199\000\200\000\000\000\000\000\000\000\076\000\201\000\202\000\
\000\000\000\000\000\000\205\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\181\000\000\000\000\000\033\000\037\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\162\000\000\000\000\000\000\000\000\000\000\000\000\000\
\185\000\000\000\184\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\154\000\000\000\036\000\035\000\025\000\
\000\000\143\000\000\000\137\000\000\000\000\000\135\000\198\000\
\000\000\099\000\009\000\000\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\097\000\000\000\000\000\000\000\017\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\160\000\000\000\170\000\163\000\172\000\000\000\000\000\
\192\000\000\000\190\000\194\000\000\000\000\000\041\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
\000\000\000\000\081\000\000\000\013\000\000\000\000\000\175\000\
\000\000\000\000\000\000\019\000\000\000\178\000\180\000\075\000\
\038\000\039\000\040\000\161\000\028\000\000\000\186\000\000\000\
\000\000\183\000\000\000\153\000\000\000\000\000\000\000\142\000\
\000\000\000\000\197\000\098\000\014\000\176\000\000\000\095\000\
\000\000\000\000\000\000\187\000\191\000\189\000\193\000\000\000\
\000\000\138\000\000\000\073\000\078\000\000\000\000\000\000\000\
\000\000\144\000\000\000\000\000\000\000\156\000\000\000\000\000\
\155\000"

let yydgoto = "\002\000\
\037\000\038\000\039\000\040\000\066\000\149\000\252\000\255\000\
\000\001\181\000\091\000\042\000\228\000\043\000\150\000\044\000\
\062\000\092\000\045\000\146\000\046\000\085\000\047\000\093\000\
\231\000\232\000\235\000\055\000\056\000\053\000\081\001\184\000\
\233\000\057\000\169\000\058\000\164\000\175\000\040\001\054\000\
\163\000\243\000\236\000\237\000\083\001\176\000\177\000\152\000\
\048\001\187\000\097\000\229\000\026\001\249\000\065\001"

let yysindex = "\042\000\
\142\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\255\100\255\212\255\212\255\
\129\255\042\255\212\255\159\255\150\017\047\016\047\016\000\016\
\066\255\000\000\000\000\212\255\235\012\172\255\111\255\047\016\
\047\016\047\016\047\016\047\016\000\000\069\013\000\000\000\000\
\189\017\000\000\047\255\212\255\160\255\067\255\000\000\000\000\
\209\255\000\000\000\000\047\255\000\016\250\255\047\255\000\016\
\004\000\000\000\204\255\006\000\000\000\104\255\047\255\047\016\
\007\000\192\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\212\255\000\000\228\017\
\111\255\000\000\228\017\162\015\016\000\000\000\000\000\023\000\
\000\000\047\016\047\016\047\016\047\016\047\016\228\017\254\255\
\010\000\207\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\142\013\000\000\047\016\047\016\047\016\047\016\047\016\
\047\016\047\016\047\016\047\016\047\016\047\016\047\016\047\016\
\047\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\016\047\016\047\016\047\016\047\016\
\047\016\047\016\204\255\047\255\022\255\005\000\010\255\000\000\
\238\254\040\255\047\016\047\016\072\255\040\255\013\255\000\000\
\000\000\000\000\212\255\090\255\046\255\000\000\000\000\000\000\
\212\255\049\000\006\255\000\000\047\016\042\015\009\000\013\000\
\021\000\203\016\054\000\061\000\089\015\189\017\000\000\026\000\
\011\000\000\000\114\255\242\016\000\000\000\000\047\016\040\255\
\047\016\040\255\000\000\228\017\210\255\210\255\012\000\012\000\
\012\000\012\000\121\255\121\255\053\018\019\018\006\018\236\255\
\228\017\146\255\146\255\146\255\146\255\146\255\146\255\228\017\
\130\255\000\000\047\255\047\255\040\255\000\016\047\016\162\015\
\000\000\040\255\000\000\000\000\016\255\228\017\024\000\036\000\
\031\000\228\017\050\255\000\000\029\000\000\000\000\000\000\000\
\047\016\000\000\250\255\000\000\047\255\047\016\000\000\000\000\
\032\000\000\000\000\000\034\000\228\017\000\000\037\000\152\014\
\047\255\035\000\000\016\000\000\068\000\162\015\189\017\000\000\
\000\000\033\000\018\000\073\000\000\016\047\000\050\000\228\017\
\051\000\000\000\150\255\000\000\000\000\000\000\228\017\225\014\
\000\000\170\255\000\000\000\000\040\255\032\000\000\000\047\016\
\000\000\047\016\047\016\028\017\212\255\063\255\069\017\000\000\
\018\000\079\000\000\000\042\015\000\000\009\000\040\255\000\000\
\075\000\083\000\189\017\000\000\047\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\162\015\000\000\032\255\
\145\255\000\000\024\000\000\000\228\017\044\000\047\255\000\000\
\047\016\047\016\000\000\000\000\000\000\000\000\000\016\000\000\
\061\255\009\000\057\255\000\000\000\000\000\000\000\000\047\016\
\180\255\000\000\110\017\000\000\000\000\047\255\047\255\162\015\
\228\017\000\000\047\016\147\255\009\000\000\000\228\017\162\015\
\000\000"

let yyrindex = "\000\000\
\094\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\096\001\000\000\000\000\
\050\011\000\000\000\000\000\000\000\000\104\000\000\000\000\000\
\124\011\000\000\000\000\000\000\000\000\094\016\000\000\000\000\
\141\016\000\000\036\009\000\000\000\000\000\000\058\000\000\000\
\197\011\088\012\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\120\007\
\209\015\000\000\205\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\062\000\063\000\077\000\112\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\100\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\255\000\000\000\000\009\010\000\000\000\000\
\000\000\000\000\078\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\181\255\091\000\
\000\000\000\000\000\000\000\000\085\255\189\013\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\033\008\142\002\232\002\194\000\028\001\
\123\001\213\001\066\003\161\003\033\006\117\006\202\006\036\007\
\083\010\251\003\085\004\180\004\014\005\104\005\199\005\159\010\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\009\113\255\189\255\000\000\
\092\000\125\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\016\000\000\000\000\000\000\000\000\000\000\
\208\008\000\000\000\000\162\012\123\008\000\000\000\000\067\000\
\000\000\230\254\000\000\000\000\014\012\120\255\006\014\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\255\
\000\000\000\000\000\000\000\000\000\000\000\000\232\010\000\000\
\000\000\000\000\000\000\000\000\000\000\117\009\000\000\000\000\
\000\000\076\000\175\255\000\000\000\000\000\000\191\255\000\000\
\000\000\000\000\000\000\089\000\000\000\195\255\000\000\000\000\
\047\002\000\000\079\014\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\197\255\000\000\183\255\202\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\213\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\200\255\000\000\000\000\000\000\000\000\000\000\
\218\255\000\000\000\000\000\000\225\255\000\000\208\255\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\224\255\089\255\000\000\248\255\000\000\000\000\
\000\000\139\000\255\255\169\255\102\255\000\000\000\000\000\000\
\098\001\205\255\000\000\000\000\000\000\116\001\000\000\239\255\
\230\255\213\000\000\000\001\000\000\000\000\000\000\000\210\254\
\000\000\000\000\000\000\095\255\080\000\214\255\084\000\000\000\
\171\000\000\000\127\000\162\000\108\000\122\255\000\000\242\000\
\000\000\000\000\037\255\000\000\000\000\234\000\000\000"

let yytablesize = 5006
let yytable = "\041\000\
\151\000\242\000\106\000\240\000\183\000\115\000\254\000\247\000\
\060\000\159\000\174\000\105\000\165\000\217\000\250\000\052\000\
\177\000\177\000\063\000\064\000\087\000\088\000\195\000\248\000\
\172\000\090\000\177\000\103\000\098\000\218\000\109\000\110\000\
\111\000\112\000\113\000\160\000\041\000\015\001\166\000\017\001\
\059\000\159\000\001\000\225\000\063\000\027\001\177\000\054\001\
\059\000\102\001\061\000\225\000\195\000\159\000\223\000\147\000\
\028\001\105\001\221\000\219\000\159\000\221\000\178\000\159\000\
\159\000\251\000\021\001\159\000\226\000\029\001\084\001\025\001\
\246\000\094\000\095\000\238\000\226\000\075\001\050\000\051\000\
\239\000\195\000\222\000\148\000\019\001\241\000\063\000\159\000\
\045\001\073\001\182\000\033\001\048\000\008\001\221\000\034\001\
\188\000\109\000\110\000\111\000\112\000\224\000\096\000\045\000\
\155\000\093\001\095\001\156\000\049\000\096\001\094\001\221\000\
\041\000\157\000\196\000\197\000\198\000\199\000\200\000\201\000\
\202\000\203\000\204\000\205\000\206\000\207\000\208\000\209\000\
\244\000\100\000\066\001\072\001\077\001\010\001\100\000\245\000\
\183\000\059\000\210\000\211\000\212\000\213\000\214\000\215\000\
\216\000\227\000\172\000\090\000\078\001\227\000\083\000\043\000\
\011\001\230\000\234\000\108\000\173\000\043\000\043\000\012\001\
\043\000\043\000\043\000\043\000\101\000\085\001\148\000\065\000\
\018\001\101\000\148\000\253\000\041\000\151\000\052\001\001\001\
\117\000\151\000\118\000\007\001\119\000\120\000\121\000\227\000\
\122\000\227\000\086\001\044\000\060\001\230\000\087\001\016\001\
\008\001\049\000\044\000\001\001\095\001\044\000\044\000\104\001\
\044\000\117\000\038\001\118\000\022\001\119\000\120\000\121\000\
\063\001\122\000\123\000\124\000\227\000\107\000\046\001\064\001\
\152\000\227\000\098\001\167\000\152\000\023\001\182\000\152\000\
\151\000\245\000\167\000\105\000\151\000\145\000\052\001\151\000\
\154\000\166\000\105\000\104\000\145\000\180\000\146\000\036\001\
\166\000\049\001\104\000\149\000\039\001\146\000\147\000\149\000\
\050\000\051\000\170\000\056\001\191\000\147\000\041\000\192\000\
\193\000\158\000\194\000\150\000\051\001\067\001\158\000\150\000\
\183\000\158\000\082\001\161\000\162\000\119\000\120\000\121\000\
\183\000\122\000\157\000\179\000\227\000\157\000\007\001\167\000\
\168\000\094\000\095\000\050\000\165\000\185\000\230\000\171\000\
\234\000\069\001\186\000\117\000\189\000\118\000\227\000\119\000\
\120\000\121\000\041\000\122\000\123\000\124\000\125\000\126\000\
\190\000\127\000\220\000\082\001\101\001\172\000\090\000\227\000\
\248\000\221\000\001\001\002\001\051\001\092\001\004\001\140\000\
\141\000\142\000\143\000\144\000\145\000\005\001\009\001\039\001\
\091\001\193\000\031\001\122\000\032\001\035\001\041\001\042\001\
\050\001\043\001\053\001\047\001\055\001\057\001\097\001\076\001\
\058\001\059\001\079\001\080\001\088\001\003\000\182\000\001\000\
\165\000\103\001\107\000\002\000\108\000\111\000\182\000\045\000\
\045\000\045\000\024\001\045\000\045\000\045\000\045\000\011\000\
\045\000\045\000\045\000\117\000\103\000\045\000\045\000\045\000\
\045\000\045\000\051\000\045\000\152\000\045\000\045\000\045\000\
\045\000\164\000\102\000\045\000\045\000\012\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\153\000\045\000\045\000\
\104\000\045\000\045\000\014\001\045\000\045\000\089\001\045\000\
\045\000\045\000\045\000\045\000\090\001\037\001\045\000\045\000\
\068\001\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\049\000\049\000\049\000\070\001\049\000\049\000\049\000\
\049\000\100\001\049\000\049\000\049\000\020\001\030\001\049\000\
\049\000\049\000\049\000\049\000\052\000\049\000\000\000\049\000\
\049\000\049\000\049\000\000\000\000\000\049\000\049\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\049\000\000\000\049\000\049\000\000\000\049\000\049\000\
\000\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\049\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\050\000\050\000\050\000\000\000\050\000\
\050\000\050\000\050\000\000\000\050\000\050\000\050\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\074\000\050\000\
\000\000\050\000\050\000\050\000\050\000\000\000\000\000\050\000\
\050\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\050\000\050\000\000\000\050\000\050\000\000\000\
\050\000\050\000\000\000\050\000\050\000\050\000\050\000\050\000\
\000\000\000\000\050\000\050\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\000\000\051\000\051\000\
\051\000\051\000\000\000\051\000\051\000\051\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\048\000\051\000\000\000\
\051\000\051\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\051\000\051\000\000\000\051\000\051\000\000\000\051\000\
\051\000\000\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\051\000\051\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\052\000\052\000\052\000\000\000\
\052\000\052\000\052\000\052\000\000\000\052\000\052\000\052\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\047\000\
\052\000\000\000\052\000\052\000\052\000\052\000\000\000\000\000\
\052\000\052\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\052\000\052\000\000\000\052\000\052\000\
\000\000\052\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\000\000\000\000\052\000\052\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\074\000\074\000\
\074\000\000\000\074\000\074\000\074\000\074\000\000\000\074\000\
\074\000\074\000\000\000\000\000\074\000\074\000\000\000\074\000\
\074\000\054\000\074\000\000\000\074\000\074\000\074\000\074\000\
\000\000\000\000\074\000\074\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\074\000\074\000\000\000\
\074\000\074\000\000\000\074\000\074\000\000\000\074\000\074\000\
\074\000\074\000\074\000\000\000\000\000\074\000\074\000\000\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\000\000\048\000\048\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\053\000\048\000\000\000\048\000\048\000\048\000\048\000\000\000\
\000\000\048\000\048\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\048\000\048\000\000\000\048\000\
\048\000\000\000\048\000\048\000\000\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\048\000\048\000\000\000\048\000\
\048\000\000\000\000\000\000\000\048\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\047\000\
\047\000\047\000\000\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\047\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\059\000\047\000\000\000\047\000\047\000\047\000\
\047\000\000\000\000\000\047\000\047\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\
\000\000\047\000\047\000\000\000\047\000\047\000\000\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\047\000\047\000\
\000\000\047\000\047\000\000\000\000\000\000\000\047\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\054\000\054\000\054\000\000\000\054\000\054\000\054\000\
\054\000\000\000\054\000\054\000\054\000\000\000\000\000\054\000\
\054\000\054\000\054\000\054\000\060\000\054\000\000\000\054\000\
\054\000\054\000\054\000\000\000\000\000\054\000\054\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
\054\000\054\000\000\000\054\000\054\000\000\000\054\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\054\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\054\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
\053\000\053\000\053\000\000\000\053\000\053\000\053\000\053\000\
\000\000\053\000\053\000\053\000\000\000\000\000\053\000\053\000\
\053\000\053\000\053\000\062\000\053\000\000\000\053\000\053\000\
\053\000\053\000\000\000\000\000\053\000\053\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\000\000\053\000\
\053\000\000\000\053\000\053\000\000\000\053\000\053\000\000\000\
\053\000\053\000\053\000\053\000\053\000\000\000\000\000\053\000\
\000\000\000\000\000\000\053\000\000\000\000\000\000\000\053\000\
\000\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\059\000\059\000\059\000\000\000\059\000\059\000\
\059\000\059\000\000\000\059\000\059\000\059\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\064\000\059\000\000\000\
\059\000\059\000\059\000\059\000\000\000\000\000\059\000\059\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\059\000\059\000\000\000\059\000\059\000\000\000\059\000\
\059\000\000\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\000\000\000\000\000\000\059\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\060\000\060\000\060\000\000\000\
\060\000\060\000\060\000\060\000\000\000\060\000\060\000\060\000\
\000\000\000\000\060\000\060\000\060\000\060\000\060\000\061\000\
\060\000\000\000\060\000\060\000\060\000\060\000\000\000\000\000\
\060\000\060\000\000\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\000\000\060\000\060\000\000\000\060\000\060\000\
\000\000\060\000\060\000\000\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\060\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\000\000\
\000\000\000\000\000\000\062\000\062\000\062\000\000\000\062\000\
\062\000\062\000\062\000\000\000\062\000\062\000\062\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\063\000\062\000\
\000\000\062\000\062\000\062\000\062\000\000\000\000\000\062\000\
\062\000\000\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\000\000\062\000\062\000\000\000\062\000\062\000\000\000\
\062\000\062\000\000\000\062\000\062\000\062\000\062\000\062\000\
\000\000\000\000\062\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\062\000\000\000\000\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\064\000\064\000\064\000\
\000\000\064\000\064\000\064\000\064\000\000\000\064\000\064\000\
\064\000\000\000\000\000\064\000\064\000\064\000\064\000\064\000\
\056\000\064\000\000\000\064\000\064\000\064\000\064\000\000\000\
\000\000\064\000\064\000\000\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\064\000\064\000\000\000\064\000\
\064\000\000\000\064\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\000\000\000\000\064\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\064\000\000\000\000\000\000\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\061\000\
\061\000\061\000\000\000\061\000\061\000\061\000\061\000\000\000\
\061\000\061\000\061\000\000\000\058\000\061\000\061\000\061\000\
\061\000\061\000\000\000\061\000\000\000\061\000\061\000\061\000\
\061\000\000\000\000\000\061\000\061\000\000\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\061\000\061\000\
\000\000\061\000\061\000\000\000\061\000\061\000\000\000\061\000\
\061\000\061\000\061\000\061\000\000\000\000\000\061\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\061\000\000\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\000\000\000\000\063\000\063\000\
\063\000\055\000\063\000\063\000\063\000\063\000\000\000\063\000\
\063\000\063\000\000\000\000\000\063\000\063\000\063\000\063\000\
\063\000\000\000\063\000\000\000\063\000\063\000\063\000\063\000\
\000\000\000\000\063\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\000\000\063\000\063\000\000\000\
\063\000\063\000\000\000\063\000\063\000\000\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\063\000\000\000\000\000\
\000\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\056\000\056\000\056\000\057\000\056\000\056\000\056\000\056\000\
\000\000\056\000\056\000\056\000\000\000\000\000\056\000\056\000\
\056\000\056\000\056\000\000\000\056\000\000\000\056\000\056\000\
\056\000\056\000\000\000\000\000\056\000\056\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\000\000\056\000\
\056\000\000\000\056\000\056\000\000\000\056\000\056\000\000\000\
\056\000\056\000\056\000\056\000\056\000\000\000\000\000\056\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\058\000\058\000\058\000\070\000\
\058\000\058\000\058\000\058\000\000\000\058\000\058\000\058\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\000\000\
\058\000\000\000\058\000\058\000\058\000\058\000\000\000\000\000\
\058\000\058\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\000\000\058\000\058\000\000\000\058\000\058\000\
\000\000\058\000\058\000\000\000\058\000\058\000\058\000\058\000\
\058\000\000\000\000\000\058\000\000\000\000\000\000\000\058\000\
\000\000\000\000\000\000\058\000\000\000\000\000\000\000\000\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\055\000\055\000\055\000\083\000\055\000\055\000\055\000\
\055\000\000\000\055\000\055\000\055\000\000\000\000\000\055\000\
\055\000\055\000\055\000\055\000\000\000\055\000\000\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\055\000\055\000\000\000\055\000\055\000\000\000\055\000\055\000\
\000\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
\055\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\000\000\000\000\
\065\000\000\000\000\000\057\000\057\000\057\000\000\000\057\000\
\057\000\057\000\057\000\000\000\057\000\057\000\057\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\000\000\057\000\
\000\000\057\000\057\000\057\000\057\000\000\000\000\000\057\000\
\057\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\000\000\057\000\057\000\000\000\057\000\057\000\000\000\
\057\000\057\000\000\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\057\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\070\000\
\070\000\070\000\080\000\070\000\070\000\070\000\070\000\000\000\
\070\000\070\000\070\000\000\000\000\000\070\000\070\000\070\000\
\070\000\070\000\000\000\070\000\000\000\070\000\070\000\070\000\
\070\000\000\000\000\000\070\000\070\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\000\000\070\000\070\000\
\000\000\070\000\070\000\000\000\070\000\070\000\000\000\070\000\
\070\000\070\000\000\000\070\000\000\000\000\000\070\000\000\000\
\000\000\000\000\070\000\000\000\000\000\000\000\070\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\000\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\000\000\083\000\083\000\083\000\196\000\
\083\000\083\000\083\000\083\000\000\000\083\000\083\000\083\000\
\000\000\000\000\083\000\083\000\083\000\083\000\083\000\000\000\
\083\000\000\000\083\000\083\000\083\000\083\000\000\000\000\000\
\083\000\083\000\000\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\000\000\083\000\083\000\000\000\083\000\083\000\
\000\000\083\000\083\000\000\000\083\000\083\000\083\000\000\000\
\083\000\000\000\000\000\083\000\000\000\000\000\000\000\083\000\
\000\000\000\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\083\000\000\000\000\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\065\000\065\000\065\000\195\000\065\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\000\000\000\000\065\000\065\000\
\065\000\065\000\065\000\000\000\065\000\000\000\065\000\065\000\
\065\000\065\000\000\000\000\000\065\000\065\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\000\000\065\000\
\065\000\000\000\065\000\065\000\000\000\065\000\065\000\000\000\
\065\000\065\000\065\000\000\000\065\000\000\000\000\000\065\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\188\000\000\000\000\000\000\000\
\000\000\000\000\080\000\080\000\080\000\000\000\080\000\080\000\
\080\000\080\000\000\000\080\000\080\000\080\000\000\000\000\000\
\080\000\080\000\080\000\080\000\080\000\000\000\080\000\000\000\
\080\000\080\000\080\000\080\000\000\000\000\000\080\000\080\000\
\000\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\000\000\080\000\080\000\000\000\080\000\080\000\000\000\080\000\
\080\000\000\000\080\000\080\000\080\000\000\000\080\000\000\000\
\000\000\080\000\000\000\000\000\000\000\080\000\000\000\000\000\
\000\000\080\000\000\000\000\000\000\000\000\000\182\000\080\000\
\000\000\000\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\000\000\196\000\
\196\000\196\000\000\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\000\000\000\000\000\000\196\000\000\000\
\196\000\196\000\000\000\196\000\000\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\000\000\196\000\196\000\196\000\196\000\000\000\196\000\
\196\000\196\000\000\000\000\000\196\000\196\000\196\000\000\000\
\026\000\000\000\196\000\000\000\000\000\000\000\196\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\000\000\196\000\
\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\195\000\195\000\195\000\000\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\000\000\
\000\000\000\000\195\000\000\000\195\000\195\000\000\000\195\000\
\000\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\000\000\195\000\195\000\195\000\000\000\195\000\195\000\
\195\000\195\000\030\000\195\000\195\000\195\000\000\000\000\000\
\195\000\195\000\195\000\000\000\000\000\000\000\195\000\000\000\
\000\000\000\000\195\000\000\000\000\000\000\000\000\000\000\000\
\195\000\000\000\000\000\195\000\195\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\188\000\188\000\188\000\000\000\
\188\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
\000\000\000\000\000\000\188\000\000\000\188\000\188\000\000\000\
\188\000\000\000\188\000\188\000\188\000\188\000\000\000\188\000\
\188\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
\188\000\188\000\000\000\188\000\188\000\188\000\031\000\188\000\
\188\000\188\000\188\000\000\000\188\000\188\000\188\000\000\000\
\000\000\188\000\188\000\188\000\000\000\000\000\000\000\188\000\
\000\000\000\000\000\000\188\000\000\000\000\000\000\000\000\000\
\000\000\188\000\000\000\000\000\188\000\188\000\182\000\182\000\
\182\000\000\000\182\000\182\000\182\000\182\000\000\000\182\000\
\182\000\182\000\000\000\000\000\000\000\182\000\000\000\182\000\
\182\000\000\000\182\000\000\000\182\000\182\000\182\000\182\000\
\000\000\182\000\182\000\182\000\000\000\182\000\182\000\182\000\
\182\000\182\000\182\000\182\000\000\000\182\000\182\000\027\000\
\000\000\182\000\182\000\182\000\182\000\000\000\182\000\182\000\
\182\000\000\000\000\000\182\000\000\000\182\000\000\000\000\000\
\000\000\182\000\000\000\000\000\000\000\182\000\000\000\000\000\
\000\000\000\000\000\000\182\000\000\000\000\000\182\000\182\000\
\026\000\026\000\026\000\000\000\026\000\026\000\026\000\026\000\
\000\000\026\000\026\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\026\000\000\000\026\000\000\000\026\000\026\000\
\026\000\026\000\000\000\000\000\026\000\026\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\026\000\022\000\000\000\026\000\000\000\026\000\000\000\000\000\
\026\000\000\000\026\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000\
\026\000\000\000\030\000\030\000\030\000\000\000\030\000\030\000\
\030\000\030\000\000\000\030\000\030\000\030\000\000\000\000\000\
\000\000\030\000\000\000\030\000\030\000\000\000\030\000\000\000\
\030\000\030\000\030\000\030\000\000\000\000\000\030\000\030\000\
\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\000\000\000\000\030\000\024\000\000\000\030\000\000\000\030\000\
\000\000\000\000\030\000\000\000\030\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\030\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\030\000\000\000\000\000\000\000\031\000\031\000\
\031\000\000\000\031\000\031\000\031\000\031\000\000\000\031\000\
\031\000\031\000\000\000\000\000\000\000\031\000\000\000\031\000\
\031\000\000\000\031\000\000\000\031\000\031\000\031\000\031\000\
\000\000\000\000\031\000\031\000\000\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\096\000\000\000\031\000\000\000\
\000\000\031\000\000\000\031\000\000\000\000\000\031\000\000\000\
\031\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\000\000\031\000\027\000\
\027\000\027\000\000\000\027\000\027\000\027\000\027\000\000\000\
\027\000\027\000\027\000\000\000\000\000\000\000\027\000\000\000\
\027\000\027\000\000\000\027\000\000\000\027\000\027\000\027\000\
\027\000\000\000\000\000\027\000\027\000\000\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\094\000\000\000\027\000\
\000\000\000\000\027\000\000\000\027\000\000\000\000\000\027\000\
\000\000\027\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\000\000\027\000\
\000\000\022\000\022\000\022\000\000\000\022\000\022\000\022\000\
\022\000\000\000\022\000\022\000\022\000\000\000\000\000\000\000\
\022\000\000\000\022\000\022\000\000\000\022\000\000\000\022\000\
\022\000\022\000\022\000\000\000\000\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\008\000\
\000\000\022\000\000\000\000\000\022\000\000\000\022\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\022\000\000\000\024\000\024\000\024\000\000\000\024\000\
\024\000\024\000\024\000\000\000\024\000\024\000\024\000\000\000\
\000\000\000\000\024\000\000\000\024\000\024\000\000\000\024\000\
\000\000\024\000\024\000\024\000\024\000\000\000\000\000\024\000\
\024\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\010\000\000\000\024\000\000\000\000\000\024\000\000\000\
\024\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\024\000\096\000\096\000\096\000\000\000\
\096\000\096\000\096\000\096\000\000\000\096\000\096\000\096\000\
\000\000\000\000\000\000\096\000\000\000\096\000\096\000\000\000\
\096\000\000\000\096\000\096\000\096\000\096\000\000\000\000\000\
\096\000\096\000\000\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\000\000\000\000\096\000\000\000\000\000\096\000\
\000\000\000\000\096\000\000\000\096\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\000\000\000\000\000\000\000\096\000\
\000\000\000\000\000\000\096\000\000\000\000\000\000\000\000\000\
\000\000\096\000\000\000\000\000\096\000\094\000\094\000\094\000\
\000\000\094\000\094\000\094\000\094\000\000\000\094\000\094\000\
\094\000\000\000\000\000\000\000\094\000\000\000\094\000\094\000\
\000\000\094\000\000\000\094\000\094\000\094\000\094\000\000\000\
\000\000\094\000\094\000\000\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\000\000\000\000\094\000\000\000\000\000\
\094\000\000\000\000\000\094\000\000\000\094\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\000\000\000\000\
\094\000\000\000\000\000\000\000\094\000\000\000\000\000\000\000\
\000\000\000\000\094\000\000\000\000\000\094\000\000\000\008\000\
\008\000\008\000\000\000\008\000\008\000\008\000\008\000\000\000\
\008\000\008\000\008\000\000\000\000\000\000\000\008\000\000\000\
\008\000\008\000\000\000\008\000\000\000\008\000\008\000\008\000\
\008\000\000\000\000\000\008\000\008\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\008\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\008\000\
\000\000\010\000\010\000\010\000\000\000\010\000\010\000\010\000\
\010\000\000\000\010\000\010\000\010\000\000\000\000\000\000\000\
\010\000\000\000\010\000\010\000\000\000\010\000\000\000\010\000\
\010\000\010\000\010\000\000\000\000\000\010\000\010\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\000\000\010\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\010\000\003\000\004\000\005\000\000\000\006\000\007\000\
\008\000\009\000\000\000\010\000\011\000\012\000\000\000\000\000\
\000\000\013\000\000\000\000\000\015\000\000\000\016\000\000\000\
\000\000\086\000\019\000\000\000\000\000\000\000\000\000\022\000\
\000\000\023\000\024\000\000\000\000\000\000\000\028\000\029\000\
\000\000\000\000\030\000\000\000\000\000\089\000\090\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\000\000\099\000\000\000\069\000\000\000\100\000\000\000\071\000\
\072\000\101\000\000\000\074\000\075\000\076\000\077\000\102\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\000\080\000\
\081\000\082\000\083\000\084\000\003\000\004\000\005\000\000\000\
\006\000\007\000\008\000\009\000\000\000\010\000\011\000\012\000\
\000\000\000\000\000\000\013\000\000\000\014\000\015\000\000\000\
\016\000\000\000\017\000\018\000\019\000\020\000\000\000\000\000\
\021\000\022\000\000\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\000\000\030\000\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\114\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\036\000\003\000\004\000\005\000\
\000\000\006\000\007\000\008\000\009\000\000\000\010\000\011\000\
\012\000\000\000\000\000\000\000\013\000\000\000\014\000\015\000\
\000\000\016\000\000\000\017\000\018\000\019\000\020\000\000\000\
\000\000\021\000\022\000\000\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\030\000\000\000\000\000\
\031\000\000\000\000\000\000\000\020\000\020\000\020\000\000\000\
\020\000\020\000\020\000\020\000\032\000\020\000\020\000\020\000\
\033\000\000\000\000\000\020\000\034\000\000\000\020\000\000\000\
\020\000\000\000\035\000\020\000\020\000\036\000\000\000\000\000\
\020\000\020\000\000\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\000\000\000\000\020\000\000\000\000\000\020\000\
\000\000\020\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\020\000\016\000\016\000\016\000\
\000\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\016\000\000\000\000\000\000\000\016\000\000\000\000\000\016\000\
\000\000\016\000\000\000\000\000\016\000\016\000\000\000\000\000\
\000\000\016\000\016\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\000\000\000\000\016\000\000\000\000\000\
\016\000\000\000\016\000\000\000\000\000\016\000\000\000\016\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\016\000\018\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\018\000\000\000\000\000\000\000\018\000\000\000\000\000\
\018\000\000\000\018\000\000\000\000\000\018\000\018\000\000\000\
\000\000\000\000\018\000\018\000\000\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\000\000\018\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\018\000\000\000\
\018\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\018\000\003\000\
\004\000\005\000\000\000\006\000\007\000\008\000\009\000\000\000\
\010\000\011\000\012\000\000\000\000\000\000\000\013\000\000\000\
\014\000\015\000\000\000\016\000\000\000\000\000\018\000\019\000\
\000\000\000\000\000\000\021\000\022\000\000\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\000\000\000\000\030\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\044\001\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\036\000\
\003\000\004\000\005\000\000\000\006\000\007\000\008\000\009\000\
\000\000\010\000\011\000\012\000\000\000\000\000\000\000\013\000\
\000\000\000\000\015\000\000\000\016\000\000\000\000\000\018\000\
\019\000\000\000\000\000\000\000\021\000\022\000\000\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\000\000\000\000\
\030\000\000\000\000\000\031\000\000\000\061\001\000\000\000\000\
\062\001\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\036\000\003\000\004\000\005\000\000\000\006\000\007\000\008\000\
\009\000\000\000\010\000\011\000\012\000\000\000\000\000\000\000\
\013\000\000\000\014\000\015\000\000\000\016\000\000\000\000\000\
\018\000\019\000\000\000\000\000\000\000\021\000\022\000\000\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\030\000\000\000\000\000\031\000\000\000\000\000\000\000\
\003\000\004\000\005\000\000\000\006\000\007\000\008\000\009\000\
\032\000\010\000\011\000\012\000\033\000\000\000\000\000\013\000\
\034\000\000\000\015\000\000\000\016\000\000\000\035\000\018\000\
\019\000\036\000\000\000\000\000\021\000\022\000\000\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\000\000\000\000\
\030\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\006\001\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\036\000\003\000\004\000\005\000\000\000\006\000\007\000\008\000\
\009\000\000\000\010\000\011\000\012\000\000\000\000\000\000\000\
\013\000\000\000\000\000\015\000\000\000\016\000\000\000\000\000\
\018\000\019\000\000\000\000\000\000\000\021\000\022\000\000\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\030\000\000\000\000\000\031\000\000\000\000\000\000\000\
\205\000\205\000\205\000\000\000\205\000\205\000\205\000\205\000\
\032\000\205\000\205\000\205\000\033\000\000\000\000\000\205\000\
\034\000\000\000\205\000\000\000\205\000\000\000\035\000\205\000\
\205\000\036\000\000\000\000\000\205\000\205\000\000\000\205\000\
\205\000\205\000\205\000\205\000\205\000\205\000\000\000\000\000\
\205\000\000\000\000\000\205\000\000\000\000\000\000\000\003\000\
\004\000\005\000\000\000\006\000\007\000\008\000\009\000\205\000\
\010\000\011\000\012\000\205\000\000\000\000\000\013\000\205\000\
\000\000\015\000\000\000\016\000\000\000\205\000\086\000\019\000\
\205\000\000\000\000\000\000\000\022\000\000\000\023\000\024\000\
\000\000\000\000\000\000\028\000\029\000\000\000\000\000\030\000\
\000\000\000\000\089\000\090\000\000\000\000\000\003\000\004\000\
\005\000\000\000\006\000\007\000\008\000\009\000\032\000\010\000\
\011\000\012\000\033\000\000\000\000\000\013\000\034\000\000\000\
\015\000\000\000\016\000\000\000\035\000\086\000\019\000\036\000\
\000\000\000\000\000\000\022\000\000\000\023\000\024\000\000\000\
\000\000\000\000\028\000\029\000\000\000\000\000\030\000\000\000\
\000\000\031\000\000\000\000\000\000\000\140\000\140\000\140\000\
\000\000\140\000\140\000\140\000\140\000\032\000\140\000\140\000\
\140\000\033\000\000\000\000\000\140\000\034\000\000\000\000\000\
\000\000\140\000\000\000\035\000\140\000\140\000\036\000\000\000\
\000\000\000\000\140\000\000\000\140\000\140\000\000\000\000\000\
\000\000\140\000\140\000\000\000\000\000\140\000\000\000\000\000\
\140\000\140\000\000\000\000\000\134\000\134\000\134\000\000\000\
\134\000\134\000\134\000\134\000\140\000\134\000\134\000\134\000\
\140\000\000\000\000\000\134\000\140\000\000\000\134\000\000\000\
\000\000\000\000\140\000\134\000\134\000\140\000\000\000\000\000\
\000\000\134\000\000\000\134\000\134\000\000\000\000\000\000\000\
\134\000\134\000\000\000\000\000\134\000\000\000\000\000\134\000\
\134\000\000\000\000\000\141\000\141\000\141\000\000\000\141\000\
\141\000\141\000\141\000\134\000\141\000\141\000\141\000\134\000\
\000\000\000\000\141\000\134\000\000\000\000\000\000\000\141\000\
\000\000\134\000\141\000\141\000\134\000\000\000\000\000\000\000\
\141\000\000\000\141\000\141\000\000\000\000\000\000\000\141\000\
\141\000\000\000\000\000\141\000\000\000\000\000\141\000\141\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\001\141\000\000\000\000\000\000\000\141\000\000\000\
\000\000\000\000\141\000\000\000\000\000\116\000\000\000\000\000\
\141\000\000\000\117\000\141\000\118\000\000\000\119\000\120\000\
\121\000\000\000\122\000\123\000\124\000\125\000\126\000\000\000\
\127\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\001\000\000\000\000\000\000\000\000\000\000\140\000\141\000\
\142\000\143\000\144\000\145\000\116\000\000\000\000\000\000\000\
\000\000\117\000\000\000\118\000\000\000\119\000\120\000\121\000\
\000\000\122\000\123\000\124\000\125\000\126\000\000\000\127\000\
\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\140\000\141\000\142\000\
\143\000\144\000\145\000\071\001\000\000\000\000\116\000\000\000\
\000\000\000\000\000\000\117\000\000\000\118\000\000\000\119\000\
\120\000\121\000\000\000\122\000\123\000\124\000\125\000\126\000\
\000\000\127\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\
\141\000\142\000\143\000\144\000\145\000\074\001\000\000\116\000\
\000\000\000\000\000\000\000\000\117\000\000\000\118\000\000\000\
\119\000\120\000\121\000\000\000\122\000\123\000\124\000\125\000\
\126\000\000\000\127\000\128\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\141\000\142\000\143\000\144\000\145\000\099\001\000\000\
\116\000\000\000\000\000\000\000\000\000\117\000\000\000\118\000\
\000\000\119\000\120\000\121\000\000\000\122\000\123\000\124\000\
\125\000\126\000\000\000\127\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\140\000\141\000\142\000\143\000\144\000\145\000\067\000\
\000\000\000\000\000\000\000\000\068\000\000\000\069\000\000\000\
\070\000\000\000\071\000\072\000\073\000\000\000\074\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\000\080\000\081\000\082\000\083\000\084\000\116\000\
\000\000\000\000\000\000\000\000\117\000\000\000\118\000\000\000\
\119\000\120\000\121\000\000\000\122\000\123\000\124\000\125\000\
\126\000\000\000\127\000\128\000\000\000\129\000\130\000\131\000\
\132\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\116\000\000\000\
\000\000\000\000\000\000\117\000\000\000\118\000\000\000\119\000\
\120\000\121\000\000\000\122\000\123\000\124\000\125\000\126\000\
\000\000\127\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\
\141\000\142\000\143\000\144\000\145\000\117\000\000\000\118\000\
\000\000\119\000\120\000\121\000\000\000\122\000\123\000\124\000\
\125\000\126\000\117\000\000\000\118\000\000\000\119\000\120\000\
\121\000\000\000\122\000\123\000\124\000\125\000\000\000\000\000\
\000\000\140\000\141\000\142\000\143\000\144\000\145\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\000\141\000\
\142\000\143\000\144\000\145\000\117\000\000\000\118\000\000\000\
\119\000\120\000\121\000\000\000\122\000\123\000\124\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\141\000\142\000\143\000\144\000\145\000"

let yycheck = "\001\000\
\043\000\163\000\029\000\158\000\092\000\038\000\174\000\169\000\
\017\000\052\000\062\000\029\000\055\000\148\000\009\001\015\000\
\043\001\044\001\018\000\019\000\022\000\023\000\008\001\008\001\
\043\001\044\001\053\001\029\000\028\000\008\001\032\000\033\000\
\034\000\035\000\036\000\053\000\038\000\192\000\056\000\194\000\
\009\001\027\001\001\000\012\001\044\000\030\001\073\001\011\001\
\009\001\096\001\009\001\012\001\038\001\039\001\073\001\009\001\
\041\001\104\001\049\001\038\001\046\001\049\001\064\000\049\001\
\050\001\060\001\221\000\053\001\037\001\054\001\039\001\226\000\
\027\001\008\001\009\001\004\001\037\001\041\001\037\001\038\001\
\009\001\114\000\073\001\037\001\219\000\073\001\086\000\073\001\
\000\001\027\001\092\000\042\001\010\001\181\000\049\001\046\001\
\098\000\099\000\100\000\101\000\102\000\153\000\037\001\000\000\
\038\001\045\001\050\001\041\001\009\001\053\001\050\001\049\001\
\114\000\047\001\116\000\117\000\118\000\119\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\039\001\045\001\029\001\037\001\044\001\185\000\050\001\046\001\
\224\000\009\001\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\154\000\043\001\044\001\047\001\158\000\039\001\039\001\
\039\001\155\000\156\000\045\001\053\001\046\001\046\001\046\001\
\049\001\050\001\050\001\052\001\045\001\064\001\042\001\009\001\
\039\001\050\001\046\001\173\000\174\000\049\001\006\001\046\001\
\056\001\220\000\058\001\181\000\060\001\061\001\062\001\192\000\
\064\001\194\000\042\001\039\001\039\001\191\000\046\001\193\000\
\024\001\000\000\046\001\046\001\050\001\049\001\050\001\053\001\
\052\001\056\001\245\000\058\001\222\000\060\001\061\001\062\001\
\039\001\064\001\065\001\066\001\221\000\042\001\001\001\046\001\
\042\001\226\000\039\001\039\001\046\001\223\000\224\000\049\001\
\042\001\046\001\046\001\039\001\046\001\039\001\062\001\049\001\
\073\001\039\001\046\001\039\001\046\001\046\001\039\001\241\000\
\046\001\003\001\046\001\042\001\246\000\046\001\039\001\046\001\
\037\001\038\001\047\001\013\001\046\001\046\001\000\001\049\001\
\050\001\049\001\052\001\042\001\006\001\032\001\050\001\046\001\
\096\001\053\001\053\001\018\001\019\001\060\001\061\001\062\001\
\104\001\064\001\050\001\013\001\029\001\053\001\024\001\020\001\
\021\001\008\001\009\001\000\000\071\001\014\001\032\001\026\001\
\034\001\035\001\012\001\056\001\039\001\058\001\047\001\060\001\
\061\001\062\001\044\001\064\001\065\001\066\001\067\001\068\001\
\039\001\070\001\046\001\094\001\095\001\043\001\044\001\064\001\
\008\001\049\001\046\001\039\001\062\001\079\001\009\001\084\001\
\085\001\086\001\087\001\088\001\089\001\009\001\045\001\073\001\
\074\001\050\001\039\001\064\001\046\001\049\001\047\001\046\001\
\013\001\045\001\050\001\049\001\012\001\039\001\088\001\009\001\
\039\001\039\001\016\001\009\001\049\001\000\000\096\001\000\000\
\039\001\099\001\039\001\000\000\039\001\039\001\104\001\000\001\
\001\001\002\001\224\000\004\001\005\001\006\001\007\001\045\001\
\009\001\010\001\011\001\039\001\039\001\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\049\001\022\001\023\001\024\001\
\025\001\039\001\039\001\028\001\029\001\045\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\044\000\039\001\040\001\
\029\000\042\001\043\001\191\000\045\001\046\001\071\001\048\001\
\049\001\050\001\051\001\052\001\073\001\243\000\055\001\056\001\
\034\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\000\001\001\001\002\001\035\001\004\001\005\001\006\001\
\007\001\094\001\009\001\010\001\011\001\220\000\229\000\014\001\
\015\001\016\001\017\001\018\001\000\000\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\040\001\255\255\042\001\043\001\255\255\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\055\001\056\001\255\255\058\001\059\001\060\001\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\087\001\088\001\089\001\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\255\255\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\040\001\255\255\042\001\043\001\255\255\
\045\001\046\001\255\255\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\255\255\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\087\001\088\001\089\001\255\255\255\255\255\255\
\255\255\255\255\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\255\255\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\255\255\042\001\043\001\255\255\045\001\
\046\001\255\255\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\055\001\056\001\255\255\058\001\059\001\060\001\061\001\
\062\001\063\001\255\255\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\255\255\042\001\043\001\
\255\255\045\001\046\001\255\255\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\055\001\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\255\255\255\255\014\001\015\001\255\255\017\001\
\018\001\000\000\020\001\255\255\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\255\255\
\042\001\043\001\255\255\045\001\046\001\255\255\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\082\001\083\001\084\001\085\001\086\001\087\001\088\001\089\001\
\255\255\255\255\255\255\255\255\255\255\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\040\001\255\255\042\001\
\043\001\255\255\045\001\046\001\255\255\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\055\001\056\001\255\255\058\001\
\059\001\255\255\255\255\255\255\063\001\255\255\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\255\255\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\040\001\
\255\255\042\001\043\001\255\255\045\001\046\001\255\255\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\255\255\058\001\059\001\255\255\255\255\255\255\063\001\255\255\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\000\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\000\000\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\040\001\255\255\042\001\043\001\255\255\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\055\001\255\255\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\255\255\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\087\001\088\001\089\001\255\255\255\255\255\255\255\255\255\255\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\255\255\042\001\043\001\255\255\045\001\046\001\255\255\
\048\001\049\001\050\001\051\001\052\001\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\255\255\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\255\255\042\001\043\001\255\255\045\001\
\046\001\255\255\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\055\001\255\255\255\255\255\255\059\001\255\255\255\255\
\255\255\063\001\255\255\255\255\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\255\255\042\001\043\001\
\255\255\045\001\046\001\255\255\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\255\255\255\255\
\255\255\255\255\255\255\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\255\255\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\040\001\255\255\042\001\043\001\255\255\
\045\001\046\001\255\255\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\055\001\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\087\001\088\001\089\001\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\040\001\255\255\042\001\
\043\001\255\255\045\001\046\001\255\255\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\055\001\255\255\255\255\255\255\
\059\001\255\255\255\255\255\255\063\001\255\255\255\255\255\255\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\255\255\000\000\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\040\001\
\255\255\042\001\043\001\255\255\045\001\046\001\255\255\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\055\001\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\255\255\255\255\255\255\255\255\255\255\000\001\001\001\
\002\001\000\000\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\255\255\
\042\001\043\001\255\255\045\001\046\001\255\255\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\055\001\255\255\255\255\
\255\255\059\001\255\255\255\255\255\255\063\001\255\255\255\255\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\082\001\083\001\084\001\085\001\086\001\087\001\088\001\089\001\
\000\001\001\001\002\001\000\000\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\255\255\042\001\043\001\255\255\045\001\046\001\255\255\
\048\001\049\001\050\001\051\001\052\001\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\000\001\001\001\002\001\000\000\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\255\255\042\001\043\001\
\255\255\045\001\046\001\255\255\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\255\255\000\001\001\001\002\001\000\000\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\040\001\255\255\042\001\043\001\255\255\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\055\001\255\255\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\255\255\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\255\255\255\255\255\255\
\000\000\255\255\255\255\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\255\255\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\040\001\255\255\042\001\043\001\255\255\
\045\001\046\001\255\255\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\055\001\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\255\255\
\069\001\255\255\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\000\001\
\001\001\002\001\000\000\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\040\001\
\255\255\042\001\043\001\255\255\045\001\046\001\255\255\048\001\
\049\001\050\001\255\255\052\001\255\255\255\255\055\001\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\255\255\000\001\001\001\002\001\000\000\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\255\255\042\001\043\001\
\255\255\045\001\046\001\255\255\048\001\049\001\050\001\255\255\
\052\001\255\255\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\000\001\001\001\002\001\000\000\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\255\255\042\001\043\001\255\255\045\001\046\001\255\255\
\048\001\049\001\050\001\255\255\052\001\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\069\001\255\255\255\255\
\072\001\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\000\000\255\255\255\255\255\255\
\255\255\255\255\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\255\255\042\001\043\001\255\255\045\001\
\046\001\255\255\048\001\049\001\050\001\255\255\052\001\255\255\
\255\255\055\001\255\255\255\255\255\255\059\001\255\255\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\000\000\069\001\
\255\255\255\255\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\255\255\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\044\001\045\001\046\001\255\255\048\001\
\049\001\050\001\255\255\255\255\053\001\054\001\055\001\255\255\
\000\000\255\255\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\072\001\
\073\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\040\001\041\001\255\255\043\001\044\001\
\045\001\046\001\000\000\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\055\001\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\255\255\
\069\001\255\255\255\255\072\001\073\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\041\001\000\000\043\001\
\044\001\045\001\046\001\255\255\048\001\049\001\050\001\255\255\
\255\255\053\001\054\001\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\072\001\073\001\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\015\001\255\255\017\001\
\018\001\255\255\020\001\255\255\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\000\000\
\255\255\043\001\044\001\045\001\046\001\255\255\048\001\049\001\
\050\001\255\255\255\255\053\001\255\255\055\001\255\255\255\255\
\255\255\059\001\255\255\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\255\255\069\001\255\255\255\255\072\001\073\001\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\017\001\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\000\000\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\255\255\050\001\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\069\001\255\255\255\255\
\072\001\255\255\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\017\001\018\001\255\255\020\001\255\255\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\040\001\000\000\255\255\043\001\255\255\045\001\
\255\255\255\255\048\001\255\255\050\001\255\255\255\255\255\255\
\255\255\055\001\255\255\255\255\255\255\059\001\255\255\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\069\001\
\255\255\255\255\072\001\255\255\255\255\255\255\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\015\001\255\255\017\001\
\018\001\255\255\020\001\255\255\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\000\000\255\255\040\001\255\255\
\255\255\043\001\255\255\045\001\255\255\255\255\048\001\255\255\
\050\001\255\255\255\255\255\255\255\255\055\001\255\255\255\255\
\255\255\059\001\255\255\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\255\255\069\001\255\255\255\255\072\001\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\000\000\255\255\040\001\
\255\255\255\255\043\001\255\255\045\001\255\255\255\255\048\001\
\255\255\050\001\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\072\001\
\255\255\000\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\255\255\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\000\000\
\255\255\040\001\255\255\255\255\043\001\255\255\045\001\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\255\255\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\255\255\255\255\255\255\255\255\255\255\069\001\255\255\
\255\255\072\001\255\255\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\000\000\255\255\040\001\255\255\255\255\043\001\255\255\
\045\001\255\255\255\255\048\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\255\255\
\069\001\255\255\255\255\072\001\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\043\001\
\255\255\255\255\046\001\255\255\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\072\001\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\015\001\255\255\017\001\018\001\
\255\255\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\040\001\255\255\255\255\
\043\001\255\255\255\255\046\001\255\255\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\255\255\
\059\001\255\255\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\069\001\255\255\255\255\072\001\255\255\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\072\001\
\255\255\000\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\255\255\020\001\255\255\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\255\255\040\001\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\255\255\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\255\255\255\255\255\255\255\255\255\255\069\001\255\255\
\255\255\072\001\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\255\255\018\001\255\255\020\001\255\255\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\050\001\255\255\255\255\255\255\
\255\255\055\001\255\255\057\001\255\255\059\001\255\255\061\001\
\062\001\063\001\255\255\065\001\066\001\067\001\068\001\069\001\
\255\255\255\255\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\084\001\085\001\
\086\001\087\001\088\001\089\001\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\072\001\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\015\001\255\255\017\001\018\001\
\255\255\020\001\255\255\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\040\001\255\255\255\255\
\043\001\255\255\255\255\255\255\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\055\001\009\001\010\001\011\001\
\059\001\255\255\255\255\015\001\063\001\255\255\018\001\255\255\
\020\001\255\255\069\001\023\001\024\001\072\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\043\001\
\255\255\045\001\255\255\255\255\048\001\255\255\050\001\255\255\
\255\255\255\255\255\255\055\001\255\255\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\072\001\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\015\001\255\255\255\255\018\001\
\255\255\020\001\255\255\255\255\023\001\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\040\001\255\255\255\255\
\043\001\255\255\045\001\255\255\255\255\048\001\255\255\050\001\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\255\255\
\059\001\255\255\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\069\001\255\255\255\255\072\001\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\015\001\255\255\255\255\
\018\001\255\255\020\001\255\255\255\255\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\255\255\040\001\255\255\
\255\255\043\001\255\255\045\001\255\255\255\255\048\001\255\255\
\050\001\255\255\255\255\255\255\255\255\055\001\255\255\255\255\
\255\255\059\001\255\255\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\255\255\069\001\255\255\255\255\072\001\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\017\001\018\001\255\255\020\001\255\255\255\255\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\255\255\255\255\255\255\255\255\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\072\001\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\069\001\255\255\255\255\
\072\001\000\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\255\255\020\001\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\255\255\040\001\255\255\255\255\043\001\255\255\255\255\255\255\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\055\001\009\001\010\001\011\001\059\001\255\255\255\255\015\001\
\063\001\255\255\018\001\255\255\020\001\255\255\069\001\023\001\
\024\001\072\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\069\001\255\255\255\255\
\072\001\000\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\255\255\018\001\255\255\020\001\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\255\255\040\001\255\255\255\255\043\001\255\255\255\255\255\255\
\000\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\055\001\009\001\010\001\011\001\059\001\255\255\255\255\015\001\
\063\001\255\255\018\001\255\255\020\001\255\255\069\001\023\001\
\024\001\072\001\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\000\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\055\001\
\009\001\010\001\011\001\059\001\255\255\255\255\015\001\063\001\
\255\255\018\001\255\255\020\001\255\255\069\001\023\001\024\001\
\072\001\255\255\255\255\255\255\029\001\255\255\031\001\032\001\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\255\255\255\255\000\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\055\001\009\001\
\010\001\011\001\059\001\255\255\255\255\015\001\063\001\255\255\
\018\001\255\255\020\001\255\255\069\001\023\001\024\001\072\001\
\255\255\255\255\255\255\029\001\255\255\031\001\032\001\255\255\
\255\255\255\255\036\001\037\001\255\255\255\255\040\001\255\255\
\255\255\043\001\255\255\255\255\255\255\000\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\055\001\009\001\010\001\
\011\001\059\001\255\255\255\255\015\001\063\001\255\255\255\255\
\255\255\020\001\255\255\069\001\023\001\024\001\072\001\255\255\
\255\255\255\255\029\001\255\255\031\001\032\001\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\255\255\255\255\
\043\001\044\001\255\255\255\255\000\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\055\001\009\001\010\001\011\001\
\059\001\255\255\255\255\015\001\063\001\255\255\018\001\255\255\
\255\255\255\255\069\001\023\001\024\001\072\001\255\255\255\255\
\255\255\029\001\255\255\031\001\032\001\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\043\001\
\044\001\255\255\255\255\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\055\001\009\001\010\001\011\001\059\001\
\255\255\255\255\015\001\063\001\255\255\255\255\255\255\020\001\
\255\255\069\001\023\001\024\001\072\001\255\255\255\255\255\255\
\029\001\255\255\031\001\032\001\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\040\001\255\255\255\255\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\055\001\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\051\001\255\255\255\255\
\069\001\255\255\056\001\072\001\058\001\255\255\060\001\061\001\
\062\001\255\255\064\001\065\001\066\001\067\001\068\001\255\255\
\070\001\071\001\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\084\001\085\001\
\086\001\087\001\088\001\089\001\051\001\255\255\255\255\255\255\
\255\255\056\001\255\255\058\001\255\255\060\001\061\001\062\001\
\255\255\064\001\065\001\066\001\067\001\068\001\255\255\070\001\
\071\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\084\001\085\001\086\001\
\087\001\088\001\089\001\048\001\255\255\255\255\051\001\255\255\
\255\255\255\255\255\255\056\001\255\255\058\001\255\255\060\001\
\061\001\062\001\255\255\064\001\065\001\066\001\067\001\068\001\
\255\255\070\001\071\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\084\001\
\085\001\086\001\087\001\088\001\089\001\049\001\255\255\051\001\
\255\255\255\255\255\255\255\255\056\001\255\255\058\001\255\255\
\060\001\061\001\062\001\255\255\064\001\065\001\066\001\067\001\
\068\001\255\255\070\001\071\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\084\001\085\001\086\001\087\001\088\001\089\001\049\001\255\255\
\051\001\255\255\255\255\255\255\255\255\056\001\255\255\058\001\
\255\255\060\001\061\001\062\001\255\255\064\001\065\001\066\001\
\067\001\068\001\255\255\070\001\071\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\084\001\085\001\086\001\087\001\088\001\089\001\050\001\
\255\255\255\255\255\255\255\255\055\001\255\255\057\001\255\255\
\059\001\255\255\061\001\062\001\063\001\255\255\065\001\066\001\
\067\001\068\001\069\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\084\001\085\001\086\001\087\001\088\001\089\001\051\001\
\255\255\255\255\255\255\255\255\056\001\255\255\058\001\255\255\
\060\001\061\001\062\001\255\255\064\001\065\001\066\001\067\001\
\068\001\255\255\070\001\071\001\255\255\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\051\001\255\255\
\255\255\255\255\255\255\056\001\255\255\058\001\255\255\060\001\
\061\001\062\001\255\255\064\001\065\001\066\001\067\001\068\001\
\255\255\070\001\071\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\084\001\
\085\001\086\001\087\001\088\001\089\001\056\001\255\255\058\001\
\255\255\060\001\061\001\062\001\255\255\064\001\065\001\066\001\
\067\001\068\001\056\001\255\255\058\001\255\255\060\001\061\001\
\062\001\255\255\064\001\065\001\066\001\067\001\255\255\255\255\
\255\255\084\001\085\001\086\001\087\001\088\001\089\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\084\001\085\001\
\086\001\087\001\088\001\089\001\056\001\255\255\058\001\255\255\
\060\001\061\001\062\001\255\255\064\001\065\001\066\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\084\001\085\001\086\001\087\001\088\001\089\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  NIL\000\
  AS\000\
  CATCH\000\
  CCODE\000\
  ELSE\000\
  EXCEPTION\000\
  B_FOLD\000\
  FOLD\000\
  B_FOR\000\
  FOR\000\
  FROM\000\
  FUN\000\
  IF\000\
  B_IMPORT\000\
  IMPORT\000\
  IN\000\
  OPERATOR\000\
  B_REF\000\
  REF\000\
  THROW\000\
  TRY\000\
  TYPE\000\
  VAL\000\
  VAR\000\
  WHILE\000\
  B_LPAREN\000\
  LPAREN\000\
  RPAREN\000\
  B_LSQUARE\000\
  LSQUARE\000\
  RSQUARE\000\
  B_LBRACE\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  DOT\000\
  SEMICOLON\000\
  COLON\000\
  BAR\000\
  CONS\000\
  CAST\000\
  DOUBLE_ARROW\000\
  ARROW\000\
  EOF\000\
  B_MINUS\000\
  MINUS\000\
  B_PLUS\000\
  PLUS\000\
  B_STAR\000\
  STAR\000\
  SLASH\000\
  MOD\000\
  B_POWER\000\
  POWER\000\
  SHIFT_RIGHT\000\
  SHIFT_LEFT\000\
  BITWISE_AND\000\
  BITWISE_XOR\000\
  BITWISE_NOT\000\
  LOGICAL_AND\000\
  LOGICAL_OR\000\
  LOGICAL_NOT\000\
  EQUAL\000\
  PLUS_EQUAL\000\
  MINUS_EQUAL\000\
  STAR_EQUAL\000\
  SLASH_EQUAL\000\
  MOD_EQUAL\000\
  AND_EQUAL\000\
  OR_EQUAL\000\
  XOR_EQUAL\000\
  SHIFT_LEFT_EQUAL\000\
  SHIFT_RIGHT_EQUAL\000\
  EQUAL_TO\000\
  NOT_EQUAL\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  "

let yynames_block = "\
  INT\000\
  SINT\000\
  UINT\000\
  FLOAT\000\
  IDENT\000\
  B_IDENT\000\
  STRING\000\
  CHAR\000\
  TYVAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'top_level_seq_) in
    Obj.repr(
# 101 "parser.mly"
                 ( ((List.rev _1), !imported_module_list) )
# 1810 "parser.ml"
               : Syntax.exp_t list * Syntax.id_t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_level_seq_) in
    Obj.repr(
# 102 "parser.mly"
                           ( ((List.rev _1), !imported_module_list) )
# 1817 "parser.ml"
               : Syntax.exp_t list * Syntax.id_t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
              ( ([], []) )
# 1823 "parser.ml"
               : Syntax.exp_t list * Syntax.id_t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_level_seq_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_level_exp) in
    Obj.repr(
# 106 "parser.mly"
                               ( _2 @ _1 )
# 1831 "parser.ml"
               : 'top_level_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'top_level_seq_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'top_level_exp) in
    Obj.repr(
# 107 "parser.mly"
                                         ( _3 @ _1 )
# 1839 "parser.ml"
               : 'top_level_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'top_level_exp) in
    Obj.repr(
# 108 "parser.mly"
                ( _1 )
# 1846 "parser.ml"
               : 'top_level_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'complex_exp) in
    Obj.repr(
# 111 "parser.mly"
              ( _1 )
# 1853 "parser.ml"
               : 'top_level_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_name_list_) in
    Obj.repr(
# 113 "parser.mly"
(
    (List.iter (fun (a, _) -> update_imported_list a) _2;
    [DirImport (_2, curr_loc())])
)
# 1863 "parser.ml"
               : 'top_level_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dot_ident) in
    Obj.repr(
# 118 "parser.mly"
    (
        let i = get_id _2 in
        (update_imported_list i;
        [DirImportFrom (i, [], curr_loc())])
    )
# 1874 "parser.ml"
               : 'top_level_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dot_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ident_list_) in
    Obj.repr(
# 124 "parser.mly"
    (
        let i = get_id _2 in
        (update_imported_list i;
        [DirImportFrom (i, (List.rev _4), curr_loc())])
    )
# 1886 "parser.ml"
               : 'top_level_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'complex_exp_seq_) in
    Obj.repr(
# 131 "parser.mly"
                   ( List.rev _1 )
# 1893 "parser.ml"
               : 'complex_exp_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'complex_exp_seq_) in
    Obj.repr(
# 132 "parser.mly"
                             ( List.rev _1 )
# 1900 "parser.ml"
               : 'complex_exp_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'complex_exp_seq_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'complex_exp) in
    Obj.repr(
# 135 "parser.mly"
                               ( _2 @ _1 )
# 1908 "parser.ml"
               : 'complex_exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'complex_exp_seq_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'complex_exp) in
    Obj.repr(
# 136 "parser.mly"
                                         ( _3 @ _1 )
# 1916 "parser.ml"
               : 'complex_exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'complex_exp) in
    Obj.repr(
# 137 "parser.mly"
              ( _1 )
# 1923 "parser.ml"
               : 'complex_exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp_seq_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 140 "parser.mly"
               ( _2 :: _1 )
# 1931 "parser.ml"
               : 'exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp_seq_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 141 "parser.mly"
                ( _2 @ _1 )
# 1939 "parser.ml"
               : 'exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp_seq_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 142 "parser.mly"
                         ( _3 :: _1 )
# 1947 "parser.ml"
               : 'exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp_seq_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 143 "parser.mly"
                          ( _3 @ _1 )
# 1955 "parser.ml"
               : 'exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 144 "parser.mly"
      ( _1 :: [] )
# 1962 "parser.ml"
               : 'exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 145 "parser.mly"
       ( _1 )
# 1969 "parser.ml"
               : 'exp_seq_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 148 "parser.mly"
      ( _1 :: [] )
# 1976 "parser.ml"
               : 'complex_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 149 "parser.mly"
       ( _1 )
# 1983 "parser.ml"
               : 'complex_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
(
    [DefExc(ref { dexc_name=(get_id _2); dexc_tp = TypVoid; dexc_loc=curr_loc() })]
)
# 1992 "parser.ml"
               : 'complex_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 155 "parser.mly"
(
    [DefExc(ref { dexc_name=(get_id _2); dexc_tp = _4; dexc_loc=curr_loc() })]
)
# 2002 "parser.ml"
               : 'complex_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'val_spec_list_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'val_decls_) in
    Obj.repr(
# 161 "parser.mly"
(
    let vflags = List.rev _1 in
    List.map (fun (p, e, ctx) -> DefVal(p, e, vflags, ctx)) _2
)
# 2013 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fun_decl_start) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fun_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 166 "parser.mly"
    (
        let (flags, fname) = _1 in
        let (args, rt, prologue) = _2 in
        let body = expseq2exp (prologue @ [_4]) 4 in
        [DefFun (ref (make_deffun fname args rt body flags (curr_loc()) false))]
    )
# 2027 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fun_decl_start) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'fun_args) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lbrace) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp_seq_) in
    Obj.repr(
# 173 "parser.mly"
    (
        let (flags, fname) = _1 in
        let (args, rt, prologue) = _2 in
        let body = expseq2exp (prologue @ (List.rev _4)) 4 in
        [DefFun (ref (make_deffun fname args rt body flags (curr_loc()) false))]
    )
# 2042 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_lhs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 180 "parser.mly"
(
    let (targs, i) = _1 in
    let dtp = { dt_name=i; dt_template_args=targs; dt_body=_3; dt_loc=curr_loc() } in
    [DefType (ref dtp)]
)
# 2054 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 185 "parser.mly"
                ( [ExpBinOp(OpSet, _1, _3, (TypVoid, curr_loc()))] )
# 2062 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aug_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 186 "parser.mly"
                 ( let (tp, loc) = make_new_ctx() in
    [ExpBinOp(OpSet, _1, ExpBinOp(_2, _1, _3, (tp, loc)), (TypVoid, loc))] )
# 2072 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 190 "parser.mly"
          ( ExpIdent((get_id _1), make_new_ctx()) )
# 2079 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'op_name) in
    Obj.repr(
# 191 "parser.mly"
                          ( ExpIdent((get_id _2), make_new_ctx()) )
# 2086 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 192 "parser.mly"
          ( ExpLit(_1, make_new_ctx()) )
# 2093 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 193 "parser.mly"
                         ( make_bin_op(OpDot, _1, ExpIdent((get_id _3), (make_new_tp(), curr_loc_n 3))) )
# 2101 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Int64.t) in
    Obj.repr(
# 194 "parser.mly"
                     ( make_bin_op(OpDot, _1, ExpLit((LitInt _3), (make_new_tp(), curr_loc_n 3))) )
# 2109 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp_or_block) in
    Obj.repr(
# 195 "parser.mly"
                               ( _2 )
# 2116 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp_b) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp_list) in
    Obj.repr(
# 196 "parser.mly"
                                       ( ExpMkTuple((_2 :: _4), make_new_ctx()) )
# 2124 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp_b) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typespec) in
    Obj.repr(
# 197 "parser.mly"
                                       ( ExpTyped(_2, _4, make_new_ctx()) )
# 2132 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp_b) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typespec) in
    Obj.repr(
# 198 "parser.mly"
                                      ( ExpCast(_2, _4, make_new_ctx()) )
# 2140 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp_list) in
    Obj.repr(
# 201 "parser.mly"
( ExpCall(_1, _3, make_new_ctx()) )
# 2148 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'idx_list_) in
    Obj.repr(
# 204 "parser.mly"
( ExpAt(_1, (List.rev _3), make_new_ctx()) )
# 2156 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 207 "parser.mly"
      ( _1 )
# 2163 "parser.ml"
               : 'exp_b))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp_b) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 208 "parser.mly"
                ( make_bin_op(OpBitwiseOr, _1, _3) )
# 2171 "parser.ml"
               : 'exp_b))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 211 "parser.mly"
             ( _1 )
# 2178 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parser.mly"
                  ( ExpNop(make_new_ctx()) )
# 2184 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 213 "parser.mly"
               ( make_bin_op(OpAdd, _1, _3) )
# 2192 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 214 "parser.mly"
                ( make_bin_op(OpSub, _1, _3) )
# 2200 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 215 "parser.mly"
               ( make_bin_op(OpMul, _1, _3) )
# 2208 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 216 "parser.mly"
                ( make_bin_op(OpDiv, _1, _3) )
# 2216 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 217 "parser.mly"
              ( make_bin_op(OpMod, _1, _3) )
# 2224 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 218 "parser.mly"
                ( make_bin_op(OpPow, _1, _3) )
# 2232 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 219 "parser.mly"
                     ( make_bin_op(OpShiftLeft, _1, _3) )
# 2240 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 220 "parser.mly"
                      ( make_bin_op(OpShiftRight, _1, _3) )
# 2248 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 221 "parser.mly"
                      ( make_bin_op(OpLogicAnd, _1, _3) )
# 2256 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 222 "parser.mly"
                      ( make_bin_op(OpBitwiseAnd, _1, _3) )
# 2264 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 223 "parser.mly"
                     ( make_bin_op(OpLogicOr, _1, _3) )
# 2272 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 224 "parser.mly"
                      ( make_bin_op(OpBitwiseXor, _1, _3) )
# 2280 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 225 "parser.mly"
                   ( make_bin_op(OpCompareEQ, _1, _3) )
# 2288 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 226 "parser.mly"
                    ( make_bin_op(OpCompareNE, _1, _3) )
# 2296 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 227 "parser.mly"
               ( make_bin_op(OpCompareLT, _1, _3) )
# 2304 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 228 "parser.mly"
                     ( make_bin_op(OpCompareLE, _1, _3) )
# 2312 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 229 "parser.mly"
                  ( make_bin_op(OpCompareGT, _1, _3) )
# 2320 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 230 "parser.mly"
                        ( make_bin_op(OpCompareGE, _1, _3) )
# 2328 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 231 "parser.mly"
               ( make_bin_op(OpCons, _1, _3) )
# 2336 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 232 "parser.mly"
             ( make_un_op(OpDeref, _2) )
# 2343 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 233 "parser.mly"
              ( make_un_op(OpDeref, make_un_op(OpDeref, _2)) )
# 2350 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 234 "parser.mly"
            ( make_un_op(OpMakeRef, _2) )
# 2357 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 235 "parser.mly"
              ( make_un_op(OpNegate, _2) )
# 2364 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 236 "parser.mly"
            ( make_un_op(OpThrow, _2) )
# 2371 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 237 "parser.mly"
                  ( make_un_op(OpLogicNot, _2) )
# 2378 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 238 "parser.mly"
                  ( make_un_op(OpBitwiseNot, _2) )
# 2385 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'lparen) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp_or_block) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp_or_block) in
    Obj.repr(
# 239 "parser.mly"
                                                      ( ExpIf (_3, _5, Some(_7), make_new_ctx()) )
# 2395 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lparen) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp_or_block) in
    Obj.repr(
# 240 "parser.mly"
                                    ( ExpIf (_3, _5, None, make_new_ctx()) )
# 2404 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lparen) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp_or_block) in
    Obj.repr(
# 241 "parser.mly"
                                       ( ExpWhile (_3, _5, make_new_ctx()) )
# 2413 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'for_clauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_or_block) in
    Obj.repr(
# 243 "parser.mly"
    (
        let for_cl_ = _2 in
        let for_body_ = _3 in
        ExpFor ({ for_cl = for_cl_; for_body = for_body_ }, make_new_ctx())
    )
# 2425 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fold_clauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_or_block) in
    Obj.repr(
# 249 "parser.mly"
    (
        (* `fold (p=e0; ...) [fold (...) ...] e1`
              is transformed to
           `{
           var acc = e0
           for (...) [for(...) ...] { val p = acc; acc = e1 }
           acc
           }`
        *)
        let acc_tp = make_new_tp() in
        let acc_loc = curr_loc_n 2 (* pat location *) in
        let acc_id = get_unique_id "acc" true in
        let acc_ctx = (acc_tp, acc_loc) in
        let acc_exp = ExpIdent(acc_id, acc_ctx) in
        let acc_pat = PatIdent(acc_id, acc_loc) in
        let ((acc_pat0, fold_exp0), fold_cl) = _2 in
        let acc_decl = DefVal(acc_pat, fold_exp0, [ValMutable], acc_ctx) in
        let for_body = _3 in
        let for_body_loc  = get_exp_loc for_body in
        let acc_expand = DefVal(acc_pat0, acc_exp, [], (acc_tp, for_body_loc)) in
        let acc_update = ExpBinOp(OpSet, acc_exp, for_body, (TypVoid, for_body_loc)) in
        let new_for_body = ExpSeq([acc_expand; acc_update], (TypVoid, for_body_loc)) in
        let for_loc = curr_loc() in
        let new_for = ExpFor ({ for_cl = fold_cl; for_body = new_for_body }, (TypVoid, for_loc)) in
        ExpSeq([acc_decl; new_for; acc_exp], (acc_tp, for_loc))
    )
# 2458 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'exp_or_block) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'lbrace) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_matching_clauses_) in
    Obj.repr(
# 275 "parser.mly"
                                                                     ( ExpTryCatch (_2, (List.rev _6), make_new_ctx()) )
# 2467 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 276 "parser.mly"
               ( ExpCCode(_2, make_new_ctx()) )
# 2474 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fun_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 278 "parser.mly"
    (
        let ctx = make_new_ctx() in
        let (args, rt, prologue) = _2 in
        let body = expseq2exp (prologue @ [_4]) 4 in
        let df = make_deffun "lambda" args rt body [] (curr_loc()) true in
        let {df_name=f_id} = df in
        ExpSeq([DefFun (ref df); ExpIdent (f_id, ctx)], ctx)
    )
# 2489 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'fun_args) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lbrace) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'complex_exp_seq) in
    Obj.repr(
# 287 "parser.mly"
    (
        let ctx = make_new_ctx() in
        let (args, rt, prologue) = _2 in
        let body = expseq2exp (prologue @ _4) 4 in
        let df = make_deffun "lambda" args rt body [] (curr_loc()) true in
        let {df_name=f_id} = df in
        ExpSeq([DefFun (ref df); ExpIdent (f_id, ctx)], ctx)
    )
# 2505 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 296 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near characters %d-%d"
           (Parsing.symbol_start ())
           (Parsing.symbol_end ())) )
# 2514 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 302 "parser.mly"
      ( _1 )
# 2521 "parser.ml"
               : 'exp_or_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbrace) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp_seq_as_exp) in
    Obj.repr(
# 303 "parser.mly"
                               ( _2 )
# 2529 "parser.ml"
               : 'exp_or_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t) in
    Obj.repr(
# 306 "parser.mly"
      ( LitInt _1 )
# 2536 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * Int64.t) in
    Obj.repr(
# 307 "parser.mly"
       ( let (b, v) = _1 in LitSInt (b, v) )
# 2543 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * Int64.t) in
    Obj.repr(
# 308 "parser.mly"
       ( let (b, v) = _1 in LitUInt (b, v) )
# 2550 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * float) in
    Obj.repr(
# 309 "parser.mly"
        ( let (b, v) = _1 in LitFloat (b, v) )
# 2557 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 310 "parser.mly"
         ( LitString _1 )
# 2564 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 311 "parser.mly"
       ( LitChar _1 )
# 2571 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "parser.mly"
       ( LitBool true )
# 2577 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "parser.mly"
        ( LitBool false )
# 2583 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "parser.mly"
                    ( LitNil )
# 2589 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'module_name_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 317 "parser.mly"
                                  ( let i=get_id _3 in (i, i) :: _1 )
# 2597 "parser.ml"
               : 'module_name_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'module_name_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 318 "parser.mly"
                                             ( let i = get_id _3 in let j = get_id _5 in (i, j) :: _1 )
# 2606 "parser.ml"
               : 'module_name_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 319 "parser.mly"
          ( let i=get_id _1 in (i, i) :: [] )
# 2613 "parser.ml"
               : 'module_name_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 320 "parser.mly"
                     ( let i=get_id _1 in let j = get_id _3 in (i, j) :: [] )
# 2621 "parser.ml"
               : 'module_name_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 323 "parser.mly"
                            ( (get_id _3) :: _1 )
# 2629 "parser.ml"
               : 'ident_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 324 "parser.mly"
          ( (get_id _1) :: [] )
# 2636 "parser.ml"
               : 'ident_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp_seq_) in
    Obj.repr(
# 327 "parser.mly"
           ( match _1 with e :: [] -> e
             | _ -> ExpSeq((List.rev _1), make_new_ctx()) )
# 2644 "parser.ml"
               : 'exp_seq_as_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp_seq_) in
    Obj.repr(
# 329 "parser.mly"
                     ( match _1 with e :: [] -> e
             | _ -> ExpSeq((List.rev _1), make_new_ctx()) )
# 2652 "parser.ml"
               : 'exp_seq_as_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp_list_) in
    Obj.repr(
# 333 "parser.mly"
            ( List.rev _1 )
# 2659 "parser.ml"
               : 'exp_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "parser.mly"
              ( [] )
# 2665 "parser.ml"
               : 'exp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_b) in
    Obj.repr(
# 337 "parser.mly"
                        ( _3 :: _1 )
# 2673 "parser.ml"
               : 'exp_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp_b) in
    Obj.repr(
# 338 "parser.mly"
        ( _1 :: [] )
# 2680 "parser.ml"
               : 'exp_list_))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "parser.mly"
         ( "__add__" )
# 2686 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "parser.mly"
           ( "__sub__" )
# 2692 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "parser.mly"
          ( "__mul__" )
# 2698 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "parser.mly"
         ( "__div__" )
# 2704 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 345 "parser.mly"
       ( "__mod__" )
# 2710 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "parser.mly"
           ( "__pow__" )
# 2716 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "parser.mly"
              ( "__shl__" )
# 2722 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "parser.mly"
               ( "__shr__" )
# 2728 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 349 "parser.mly"
               ( "__bit_and__" )
# 2734 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 350 "parser.mly"
               ( "__bit_or__" )
# 2740 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 351 "parser.mly"
               ( "__bit_xor__" )
# 2746 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 352 "parser.mly"
               ( "__bit_not__" )
# 2752 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 353 "parser.mly"
            ( "__eq__" )
# 2758 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 354 "parser.mly"
             ( "__ne__" )
# 2764 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "parser.mly"
        ( "__lt__" )
# 2770 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "parser.mly"
              ( "__le__" )
# 2776 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 357 "parser.mly"
           ( "__gt__" )
# 2782 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 358 "parser.mly"
                 ( "__ge__" )
# 2788 "parser.ml"
               : 'op_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 361 "parser.mly"
             ( OpAdd )
# 2794 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 362 "parser.mly"
              ( OpSub )
# 2800 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "parser.mly"
             ( OpMul )
# 2806 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 364 "parser.mly"
              ( OpDiv )
# 2812 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 365 "parser.mly"
            ( OpMod )
# 2818 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 366 "parser.mly"
            ( OpBitwiseAnd )
# 2824 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 367 "parser.mly"
           ( OpBitwiseOr )
# 2830 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 368 "parser.mly"
            ( OpBitwiseXor )
# 2836 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "parser.mly"
                   ( OpShiftLeft )
# 2842 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 370 "parser.mly"
                    ( OpShiftRight )
# 2848 "parser.ml"
               : 'aug_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_clauses_) in
    Obj.repr(
# 373 "parser.mly"
               ( (List.rev _1) )
# 2855 "parser.ml"
               : 'for_clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'for_clauses_) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'for_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause) in
    Obj.repr(
# 376 "parser.mly"
                                ( _3 :: _1 )
# 2864 "parser.ml"
               : 'for_clauses_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause) in
    Obj.repr(
# 377 "parser.mly"
             ( _1 :: [] )
# 2871 "parser.ml"
               : 'for_clauses_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lparen) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'for_in_list_) in
    Obj.repr(
# 380 "parser.mly"
                             ( (List.rev _2) )
# 2879 "parser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'for_in_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_pat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'loop_range_exp) in
    Obj.repr(
# 383 "parser.mly"
                                                  ( (_3, _5) :: _1 )
# 2888 "parser.ml"
               : 'for_in_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'loop_range_exp) in
    Obj.repr(
# 384 "parser.mly"
                               ( (_1, _3) :: [] )
# 2896 "parser.ml"
               : 'for_in_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'first_fold_clause) in
    Obj.repr(
# 387 "parser.mly"
                    ( let (e0, cl0) = _1 in (e0, (cl0 :: [])) )
# 2903 "parser.ml"
               : 'fold_clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'first_fold_clause) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fold_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fold_clauses_) in
    Obj.repr(
# 388 "parser.mly"
                                        ( let (e0, cl0) = _1 in (e0, (cl0 :: (List.rev _3))) )
# 2912 "parser.ml"
               : 'fold_clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fold_clauses_) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fold_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause) in
    Obj.repr(
# 391 "parser.mly"
                                  ( _3 :: _1 )
# 2921 "parser.ml"
               : 'fold_clauses_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause) in
    Obj.repr(
# 392 "parser.mly"
             ( _1 :: [] )
# 2928 "parser.ml"
               : 'fold_clauses_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'lparen) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'simple_pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'for_in_list_) in
    Obj.repr(
# 395 "parser.mly"
                                                            ( ((_2, _4), (List.rev _6)) )
# 2938 "parser.ml"
               : 'first_fold_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 398 "parser.mly"
      ( _1 )
# 2945 "parser.ml"
               : 'loop_range_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 399 "parser.mly"
                ( ExpRange(Some(_1), Some(_3), None, make_new_ctx()) )
# 2953 "parser.ml"
               : 'loop_range_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 400 "parser.mly"
                          ( ExpRange(Some(_1), Some(_3), Some(_5), make_new_ctx()) )
# 2962 "parser.ml"
               : 'loop_range_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 403 "parser.mly"
      ( _1 )
# 2969 "parser.ml"
               : 'range_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_exp) in
    Obj.repr(
# 404 "parser.mly"
                        ( ExpRange(_1, _3, None, make_new_ctx()) )
# 2977 "parser.ml"
               : 'range_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'opt_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 405 "parser.mly"
                                  ( ExpRange(_1, _3, Some(_5), make_new_ctx()) )
# 2986 "parser.ml"
               : 'range_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 408 "parser.mly"
      ( Some(_1) )
# 2993 "parser.ml"
               : 'opt_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 409 "parser.mly"
              ( None )
# 2999 "parser.ml"
               : 'opt_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'idx_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_exp) in
    Obj.repr(
# 412 "parser.mly"
                            ( _3 :: _1 )
# 3007 "parser.ml"
               : 'idx_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range_exp) in
    Obj.repr(
# 413 "parser.mly"
            ( _1 :: [] )
# 3014 "parser.ml"
               : 'idx_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern_matching_clauses_) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'matching_patterns_) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp_seq_as_exp) in
    Obj.repr(
# 416 "parser.mly"
                                                                               ( ((List.rev _3), _5) :: _1 )
# 3023 "parser.ml"
               : 'pattern_matching_clauses_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matching_patterns_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_seq_as_exp) in
    Obj.repr(
# 417 "parser.mly"
                                                 ( ((List.rev _1), _3) :: [] )
# 3031 "parser.ml"
               : 'pattern_matching_clauses_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matching_patterns_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pat) in
    Obj.repr(
# 420 "parser.mly"
                                    ( _3 :: _1 )
# 3039 "parser.ml"
               : 'matching_patterns_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pat) in
    Obj.repr(
# 421 "parser.mly"
             ( _1 :: [] )
# 3046 "parser.ml"
               : 'matching_patterns_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 425 "parser.mly"
  (
      let loc = curr_loc() in
      match _1 with
          "_" -> PatAny(loc)
         | _ -> PatIdent((get_id _1), loc)
  )
# 3058 "parser.ml"
               : 'simple_pat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pat_list_) in
    Obj.repr(
# 432 "parser.mly"
  (
      match _2 with
        p :: [] -> p
      | _ -> PatTuple((List.rev _2), curr_loc())
  )
# 3069 "parser.ml"
               : 'simple_pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'dot_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'simple_pat_list_) in
    Obj.repr(
# 437 "parser.mly"
                                           ( PatCtor((get_id _1), (List.rev _3), curr_loc()) )
# 3077 "parser.ml"
               : 'simple_pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dot_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 438 "parser.mly"
                  ( PatCtor((get_id _1), [PatIdent((get_id _2), (curr_loc_n 2))], curr_loc()) )
# 3085 "parser.ml"
               : 'simple_pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 439 "parser.mly"
                            ( PatTyped(_1, _3, curr_loc()) )
# 3093 "parser.ml"
               : 'simple_pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pat_list_) in
    Obj.repr(
# 442 "parser.mly"
                   ( List.rev _1 )
# 3100 "parser.ml"
               : 'simple_pat_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "parser.mly"
              ( [] )
# 3106 "parser.ml"
               : 'simple_pat_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_pat_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pat) in
    Obj.repr(
# 446 "parser.mly"
                                    ( _3 :: _1 )
# 3114 "parser.ml"
               : 'simple_pat_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pat) in
    Obj.repr(
# 447 "parser.mly"
             ( _1 :: [] )
# 3121 "parser.ml"
               : 'simple_pat_list_))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "parser.mly"
      ( [] )
# 3127 "parser.ml"
               : 'val_spec_list_))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "parser.mly"
      ( ValMutable :: [] )
# 3133 "parser.ml"
               : 'val_spec_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'val_decls_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_decl) in
    Obj.repr(
# 454 "parser.mly"
                            ( _3 :: _1 )
# 3141 "parser.ml"
               : 'val_decls_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_decl) in
    Obj.repr(
# 455 "parser.mly"
           ( _1 :: [] )
# 3148 "parser.ml"
               : 'val_decls_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_or_block) in
    Obj.repr(
# 458 "parser.mly"
                                ( (_1, _3, make_new_ctx()) )
# 3156 "parser.ml"
               : 'val_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 461 "parser.mly"
              ( ([], _2) )
# 3163 "parser.ml"
               : 'fun_decl_start))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'op_name) in
    Obj.repr(
# 462 "parser.mly"
                   ( ([], _2) )
# 3170 "parser.ml"
               : 'fun_decl_start))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lparen) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'simple_pat_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_typespec) in
    Obj.repr(
# 465 "parser.mly"
                                             ( (_2, _4, []) )
# 3179 "parser.ml"
               : 'fun_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 468 "parser.mly"
                 ( _2 )
# 3186 "parser.ml"
               : 'opt_typespec))
; (fun __caml_parser_env ->
    Obj.repr(
# 469 "parser.mly"
              ( make_new_tp() )
# 3192 "parser.ml"
               : 'opt_typespec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tyvar_list_) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 472 "parser.mly"
                                         ( ((List.rev _3), (get_id _5)) )
# 3200 "parser.ml"
               : 'typedef_lhs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 473 "parser.mly"
             ( ([], (get_id _2)) )
# 3207 "parser.ml"
               : 'typedef_lhs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyvar_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 476 "parser.mly"
                          ( (get_id _3) :: _1 )
# 3215 "parser.ml"
               : 'tyvar_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 477 "parser.mly"
        ( (get_id _1) :: [] )
# 3222 "parser.ml"
               : 'tyvar_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typespec_nf) in
    Obj.repr(
# 480 "parser.mly"
              ( _1 )
# 3229 "parser.ml"
               : 'typespec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typespec_nf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 481 "parser.mly"
                             ( TypFun((match _1 with TypVoid -> [] | TypTuple(args) -> args | _ -> [_1]), _3) )
# 3237 "parser.ml"
               : 'typespec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dot_ident) in
    Obj.repr(
# 485 "parser.mly"
(
    match _1 with
    | "int" -> TypInt
    | "int8" -> TypSInt(8)
    | "uint8" -> TypUInt(8)
    | "int16" -> TypSInt(16)
    | "uint16" -> TypUInt(16)
    | "int32" -> TypSInt(32)
    | "uint32" -> TypUInt(32)
    | "int64" -> TypSInt(64)
    | "uint64" -> TypUInt(64)
    | "half" -> TypFloat(16)
    | "float" -> TypFloat(32)
    | "double" -> TypFloat(64)
    | "char" -> TypChar
    | "string" -> TypString
    | "bool" -> TypBool
    | "void" -> TypVoid
    | "exn" -> TypExc
    | "cptr" -> TypCPointer
    | _ -> TypApp([], get_id _1)
)
# 3265 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 507 "parser.mly"
        ( TypApp([], get_id _1) )
# 3272 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typespec_list_) in
    Obj.repr(
# 508 "parser.mly"
                                 ( match _2 with t::[] -> t | _ -> TypTuple(_2) )
# 3279 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typespec_list_) in
    Obj.repr(
# 509 "parser.mly"
                                       ( TypTuple(List.rev _2) )
# 3286 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typespec_nf) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nobreak_dot_ident) in
    Obj.repr(
# 512 "parser.mly"
( match (_1, _2) with
  | (x, "list") -> TypList(x)
  | (TypTuple(args), y) -> TypApp(args, get_id y)
  | (x, y) -> TypApp(x :: [], get_id y)
)
# 3298 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typespec_nf) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'shapespec) in
    Obj.repr(
# 519 "parser.mly"
( TypArray(_3, _1) )
# 3306 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typespec_nf) in
    Obj.repr(
# 522 "parser.mly"
( TypRef(_1) )
# 3313 "parser.ml"
               : 'typespec_nf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typespec_list_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 525 "parser.mly"
                                ( _3 :: _1 )
# 3321 "parser.ml"
               : 'typespec_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typespec) in
    Obj.repr(
# 526 "parser.mly"
           ( _1 :: [] )
# 3328 "parser.ml"
               : 'typespec_list_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'shapespec) in
    Obj.repr(
# 529 "parser.mly"
                  ( _1 + 1 )
# 3335 "parser.ml"
               : 'shapespec))
; (fun __caml_parser_env ->
    Obj.repr(
# 530 "parser.mly"
              ( 0 )
# 3341 "parser.ml"
               : 'shapespec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 533 "parser.mly"
          ( _1 )
# 3348 "parser.ml"
               : 'dot_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nobreak_dot_ident) in
    Obj.repr(
# 534 "parser.mly"
                                ( _1 ^ "." ^ _3 )
# 3356 "parser.ml"
               : 'dot_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nobreak_dot_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 537 "parser.mly"
                              ( _1 ^ "." ^ _3 )
# 3364 "parser.ml"
               : 'nobreak_dot_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 538 "parser.mly"
        ( _1 )
# 3371 "parser.ml"
               : 'nobreak_dot_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 541 "parser.mly"
         ( 0 )
# 3377 "parser.ml"
               : 'fold_))
; (fun __caml_parser_env ->
    Obj.repr(
# 542 "parser.mly"
       ( 0 )
# 3383 "parser.ml"
               : 'fold_))
; (fun __caml_parser_env ->
    Obj.repr(
# 545 "parser.mly"
        ( 0 )
# 3389 "parser.ml"
               : 'for_))
; (fun __caml_parser_env ->
    Obj.repr(
# 546 "parser.mly"
      ( 0 )
# 3395 "parser.ml"
               : 'for_))
; (fun __caml_parser_env ->
    Obj.repr(
# 549 "parser.mly"
           ( 0 )
# 3401 "parser.ml"
               : 'lparen))
; (fun __caml_parser_env ->
    Obj.repr(
# 550 "parser.mly"
         ( 0 )
# 3407 "parser.ml"
               : 'lparen))
; (fun __caml_parser_env ->
    Obj.repr(
# 553 "parser.mly"
           ( 0 )
# 3413 "parser.ml"
               : 'lbrace))
; (fun __caml_parser_env ->
    Obj.repr(
# 554 "parser.mly"
         ( 0 )
# 3419 "parser.ml"
               : 'lbrace))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 557 "parser.mly"
          ( _1 )
# 3426 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 558 "parser.mly"
        ( _1 )
# 3433 "parser.ml"
               : 'ident))
(* Entry ficus_module *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let ficus_module (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.exp_t list * Syntax.id_t list)
